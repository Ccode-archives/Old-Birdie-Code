// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package team.anthembolts;

import team.anthembolts.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.*;
import team.anthembolts.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public Joystick myLogitech;
    public JoystickButton a;
    public JoystickButton b;
    public Joystick myXBox;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        myXBox = new Joystick(0);
        ReleaseHatch rHatch = new ReleaseHatch();
        b = new JoystickButton(myXBox, 2);
        b.whileHeld(rHatch);
        SolenoidOff sOff = new SolenoidOff();
        b.whenReleased(sOff);
        a = new JoystickButton(myXBox, 1);
        GrabHatch gHatch = new GrabHatch();
        a.whileHeld(gHatch);
        a.whenReleased(sOff);
        myLogitech = new Joystick(1);
        double turningValue;


        // SmartDashboard Buttons
        SmartDashboard.putData("GrabHatch", gHatch);
        SmartDashboard.putData("ReleaseHatch", rHatch);
        SmartDashboard.putData("SolenoidOff", sOff);
        SmartDashboard.putData("LiftUp", new LiftUp());
        SmartDashboard.putData("LiftDown", new LiftDown());
        SmartDashboard.putData("LiftStop", new LiftStop());
        SmartDashboard.putData("ClimbAndDeliver", new ClimbAndDeliver());
        SmartDashboard.putData("FollowPath: SpaceShip", new FollowPath(1));
        SmartDashboard.putData("FollowPath: CargoShip", new FollowPath(0));

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
    public double getY()
    {
        double y = myLogitech.getY();
        
        if (Math.abs(y)>0.11){
            if (myLogitech.getRawButton(1)){
                return Math.copySign( Math.pow( (Math.abs(y)+0.2)/2, 2) + 0.4, y );
            }
            else{
                return Math.copySign( Math.pow( ( Math.abs(y) + 0.45 ) /2, 2) + 0.4, y );
            }
        }
        if(Math.abs(y) >= 0.6 && Math.abs(y)<= 1)
        {
            return Math.copySign(Math.pow(y-0.3,2) + 0.5,y);
        }
        else
        {
            return 0;
        }
        
        
    }
    public double getX()
    {
        double x = myLogitech.getX();
        if (Math.abs(x)>0.11){
            if (myLogitech.getRawButton(1)){
                return Math.copySign( Math.pow( (Math.abs(x)+0.2)/2, 2) + 0.4, x );
            }
            else{
                return Math.copySign( Math.pow( ( Math.abs(x) + 0.45 ) /2, 2) + 0.4, x );
            }
        }
        else{
            return 0;
        }
        // return Math.abs(x) > 0.11 ? x : 0;
        // if(Math.abs(x) > 0.1 && Math.abs(x) < 0.6)
        // {
        //     return Math.copySign(Math.pow(x/2, 2) + 0.5,x);
        // }
        // if(Math.abs(x) >= 0.6 && Math.abs(x)<= 1)
        // {
        //     return Math.copySign(Math.pow(x-0.3,2) + 0.5,x);
        // }
        // else
        // {
        //     return 0;
        // }
        
    }
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getmyLogitech() {
        return myLogitech;
    }

    public Joystick getmyXBox() {
        return myXBox;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

