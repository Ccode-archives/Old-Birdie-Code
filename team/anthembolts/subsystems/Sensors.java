// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package team.anthembolts.subsystems;


import team.anthembolts.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.ADXRS450_Gyro;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.PowerDistributionPanel;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Sensors extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private PowerDistributionPanel myPDP;
    public  ADXRS450_Gyro myGyro;
    public DigitalInput level1;
    // private DigitalInput hallEffectMid;
    // private DigitalInput hallEffectTop;
    private Encoder encoderLeft;
    private Encoder encoderRight;
    public Encoder encLift;
    

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public Sensors() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        myPDP = new PowerDistributionPanel(0);
        addChild("myPDP",myPDP);
        
        
        myGyro = new ADXRS450_Gyro();
        addChild("myGyro",myGyro);
        myGyro.calibrate();
        
        level1 = new DigitalInput(2);
        addChild("HallEffectBase",level1);
        
        
        // hallEffectMid = new DigitalInput(1);
        // addChild("HallEffectMid",hallEffectMid);
        
        
        // hallEffectTop = new DigitalInput(2);
        // addChild("HallEffectTop",hallEffectTop);
        
        
        encoderLeft = new Encoder(3, 4, false, EncodingType.k4X);
        addChild("EncoderLeft",encoderLeft);
        encoderLeft.setDistancePerPulse(1.0);
        encoderLeft.setPIDSourceType(PIDSourceType.kRate);
        
        encoderRight = new Encoder(5, 6, true, EncodingType.k4X);
        addChild("EncoderRight",encoderRight);
        encoderRight.setDistancePerPulse(1.0);
        encoderRight.setPIDSourceType(PIDSourceType.kRate);
        encLift = new Encoder(0, 1);
        addChild("Lift",encLift);
        // encoderRight.setDistancePerPulse(1.0);
        // encoderRight.setPIDSourceType(PIDSourceType.kRate);
        

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

