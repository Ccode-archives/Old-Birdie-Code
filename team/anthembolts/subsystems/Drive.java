// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package team.anthembolts.subsystems;

import team.anthembolts.utils.*;
import team.anthembolts.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.command.Subsystem;




import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Drive extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private Spark leftController;
    private Spark rightController;
    private DifferentialDrive myDrive;
    public static int driveState;
    public final static int DRIVE_AUTONOMOUS = 0;
    public final static int DRIVE_TELEOP = 1;
    public final static int DRIVE_OFF = 100;
    private static Joystick myStick;
    private boltsarray bArray = new boltsarray(25);
    private double startAngle = 9000;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public Drive() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        leftController = new Spark(0);
        addChild("LeftController",leftController);
        leftController.setInverted(false);
        
        rightController = new Spark(1);
        addChild("RightController",rightController);
        rightController.setInverted(false);
        
        myDrive = new DifferentialDrive(leftController, rightController);
        addChild("myDrive",myDrive);
        myDrive.setSafetyEnabled(true);
        myDrive.setExpiration(0.1);
        myDrive.setMaxOutput(1.0);
        
        

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop
        
        if(driveState == DRIVE_AUTONOMOUS)
        {

        }
        else if(driveState == DRIVE_TELEOP)
        {
            if (myStick.getRawButton(1)){

                if(startAngle==9000)
                {
                    startAngle=team.anthembolts.Robot.sensors.myGyro.getAngle();
                }
                driveStraight(team.anthembolts.Robot.oi.getY(), startAngle);
            }else{
                startAngle=9000;
            }
            double _y =  team.anthembolts.Robot.oi.getY();
            double _x =  team.anthembolts.Robot.oi.getX();
            bArray.push(_y);
            SmartDashboard.putNumber("drive-y", bArray.avg());
            SmartDashboard.putNumber("joy-x", _x);
            SmartDashboard.putNumber("joy-y", _y);
            //myDrive.arcadeDrive(team.anthembolts.Robot.oi.getY(), team.anthembolts.Robot.oi.getX());
            if(Math.abs(_y) > 0.6)
            _y = bArray.avg();
            myDrive.arcadeDrive(_y, _x);
        }
        else
        {

        }
        

    }
    public static void setJoyStick(Joystick j)
    {
        myStick = j;
    }


    public void Drive(double y, double x) {
        myDrive.arcadeDrive(y, x);
    }

    public void stopMotor() {
        myDrive.stopMotor();
    }

    public void driveStraight (double speed){
        myDrive.arcadeDrive(speed, 0);
    }

    public void driveStraight (double speed, double target) {
        myDrive.arcadeDrive(speed, turnHelper(target));
    }

    public void turn (double angle) {
        myDrive.arcadeDrive(0,angle);
    }



    public double turnHelper(double target){
        double gAngle  = team.anthembolts.Robot.sensors.myGyro.getAngle();
        double turn =0;
        turn = gAngle%360 > target%360 +0.01 ? -0.45:0;
        turn = gAngle%360 < target%360 -0.01 ? +0.45:turn;
        return turn;
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

   

}

